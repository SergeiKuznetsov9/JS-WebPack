const path = require("path");
const HtmlWebpackPlugin = require("html-webpack-plugin");

// Мы экспортируем объект, который поисывает желаемый результат
module.exports = {
  // Указывает на то, где вебпак должен начать

  // Точка входа называется «main», потому что по умолчанию «main» — это имя,
  // присвоенное файлу js сборки. Однако мы можем переименовать его как угодно и
  // тогда файлу сборки будет присвоео другое имя.
  entry: {
    build: "./src/index.js",
  },

  // Указывается путь сборки
  output: {
    path: path.resolve(__dirname, "dist"),

    // Блаодаря этой настройке старый бандл будет удален
    clean: true,
  },

  // Для работы с Вебпаком существует множество различных плагинов, которые
  // выполняют кучу разных задач
  // например существует плагин, который будет автоматически по результатам сборки
  // инжектить в HTML имя вноыь созданной сборки. Для использования плагинов, их нужно
  // установить как пакет. Например: npm install --save-dev html-webpack-plugin
  // после установки можно добавить плагин в конфигурацию:
  plugins: [
    // В данном случае в template мы указываем наш html файл, а в поле filename указываем
    // название файла, который будет создан вебпаком и который будет содержать правильный
    // скрипт (с правильным названием файл сборки). Если используем этот плагин, то из
    // файла html необходимо удалить скрипт, вебпак вставит его за нас.
    // Теперь при сборке (npx webpack --config webpack.config.js) также будет создан и HTML файл.
    new HtmlWebpackPlugin({
      template: "./index.html",
      filename: "index.html",
    }),
  ],

  mode: "production",
};
